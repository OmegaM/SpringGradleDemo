
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

version = 'SNAPSHOT-1.0'

task copyTask(type: Copy){
    from '.'
    into 'build'
    include '*.txt'
    rename {
        String fileName -> fileName.replace('.txt', '.data')
    }
}

task zipTask(type: Zip){
    File destDir = file('build/dest')
    archiveName 'abc.zip'
    from 'src'
    destinationDir destDir
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenLocal()
    mavenCentral()
}
[compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    
    }
}



dependencies {
    //define dep pkg version
    def springVersion = '4.2.5.RELEASE'
    def jacksonVersion = '2.7.3'
    
    //add dep
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    runtime (
        'javax.servlet:jstl:1.2'
        
        
        
    )
    compile (
        'ch.qos.logback:logback-classic:1.1.7',
        'org.logback-extensions:logback-ext-spring:0.1.4',
        'org.slf4j:jcl-over-slf4j:1.7.20',
        'com.google.inject:guice:3.0',
        'org.springframework:spring-webmvc:' + springVersion,
        'com.fasterxml.jackson.core:jackson-core:' + jacksonVersion,
        'com.fasterxml.jackson.core:jackson-databind:' + jacksonVersion,
        'com.fasterxml.jackson.core:jackson-annotations:' + jacksonVersion
        
    )
    
    testCompile('org.uncommons:reportng:1.1.4'){
        exclude group: "org.testng", module: "testng"
    }
    
    testCompile (
        'org.testng:testng:6.8.21',
        
        'org.mockito:mockito-all:1.8.4',
        'org.springframework:spring-test:' + springVersion
    )
}

jettyRun {
    webAppSourceDirectory file("$projectDir/src/main/webapp")
    contextPath project.name
    httpPort = 9090
    scanIntervalSeconds 1
    reload "automatic"
}

jettyRunWar{
    httpPort = 9090
}

test {
    ext.testResult = true
    useTestNG(){
        
        useDefaultListeners = true
    }
    
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    
    testLogging.showStandardStreams = true
    minHeapSize = "128m"
    maxHeapSize = "512m"
}

checkstyle {
    toolVersion = '6.18'
    sourceSets = [sourceSets.main]
    println sourceSets
    configFile = rootProject.file("config/checkstyle/checkstyle.xml");
    showViolations = true
    ignoreFailures = true
}

findbugs {
    ignoreFailures = true
}

checkstyleTest {
    enabled = false
}

findbugsTest {
    enabled = false
}


tasks.withType(Checkstyle) {
    reports {
        html.enabled false
        xml.destination rootProject.file("build/reports/checkstyle.xml")
    }
}

tasks.withType(FindBugs){
    reports {
        html.enabled false
        xml.destination rootProject.file("build/reports/findbugs.xml")
    }
}


task testCompleted << {
    if(test.testResult){
        try{
            logger.lifecycle("Build war package!")
            war.execute()
            def warDir = "/Users/Omega/warPackageCollection"
            def warname = project.name + '-' + version + '.war'
            def fromdir = buildDir.toString() + "/libs/" + warname
            copy{
                logger.lifecycle("Copy war  from:  $fromdir To : $warDir")
                from fromdir
                into warDir
                rename {
                    String fileName -> project.name + '.war'
                }
            }
        } catch (Exception ex){
            logger.error("Error!" + ex.message)
        }
    }
}


test.finalizedBy testCompleted
